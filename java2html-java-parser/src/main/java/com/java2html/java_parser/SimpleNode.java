/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.java2html.java_parser;

import com.java2html.internal.HTMLFileWriter;

public
class SimpleNode implements Node {

    protected Node parent;
    protected Node[] children;
    protected int id;
  protected Object value;
  protected JavaParser parser;

    public SimpleNode(int i) {
        id = i;
    }

    public SimpleNode(JavaParser p, int i) {
        this(i);
        parser = p;
    }

    public void jjtOpen() {
    }

    public void jjtClose() {
    }

  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

    public void jjtAddChild(Node n, int i) {
        if (children == null) {
            children = new Node[i + 1];
        }
        else if (i >= children.length) {
            Node c[] = new Node[i + 1];
            System.arraycopy(children, 0, c, 0, children.length);
            children = c;
        }
        children[i] = n;
    }

    public Node jjtGetChild(int i) {
        return children[i];
    }

    public int jjtGetNumChildren() {
        return (children == null) ? 0 : children.length;
    }

  public void jjtSetValue(Object value) { this.value = value; }
  public Object jjtGetValue() { return value; }

    /* You can override these two methods in subclasses of SimpleNode to
       customize the way the node appears when the tree is dumped.  If
       your output uses more than one line you should override
       toString(String), otherwise overriding toString() is probably all
       you need to do. */

  public String toString() { return JavaParserTreeConstants.jjtNodeName[id]; }
  public String toString(String prefix) { return prefix + toString(); }

    /* Override this method if you want to customize how the node dumps
       out its children. */

    public void dump(String prefix) {
        System.out.println(toString(prefix));
        if (children != null) {
            for (int i = 0; i < children.length; ++i) {
                SimpleNode n = (SimpleNode) children[i];
                if (n != null) {
                    n.dump(prefix + " ");
                }
            }
        }
    }

// Manually inserted code begins here

    protected Token begin, end;
    public void setFirstToken(Token t) {
        begin = t;
        //System.out.println("setFirstToken:"+t);
    }

    public void setLastToken(Token t) {
        end = t;
        //System.out.println("setLastToken:"+t);
    }

    public void process(HTMLFileWriter ostr) {
        Token t = begin;
        //System.out.println("Begin:"+t);
        //System.out.println("End:"+end);
        SimpleNode bnode;

        int num = jjtGetNumChildren();
        for (int i = 0; i < num; i++) {
            bnode = (SimpleNode) jjtGetChild(i);
            //print forward tokens
            do {
                if (t == bnode.begin) {
                    break;
                }
                print(t, ostr);

                t = t.next;
            }
            while (true);

            bnode.process(ostr);

            t = bnode.end; //t = t.next;
        }
        do {
            //if (t== end || t==null) break;
            if (t == null) {
                break;
            }
            //ostr.write("["+this.toString()+"]");
            print(t, ostr);
            t = t.next;
        }
        while (true);

        //if (t!=null && t.kind == EOF) print(t,ostr);

    }

    // The following method prints token t, as well as all preceding
    // special tokens (essentially, white space and comments).

    private static Token prevToken = null;
    protected void print(Token t, HTMLFileWriter ostr) {
        if (t == prevToken) {
            return;
        }

        //prevToken =t;
        printSpecial(t.specialToken, ostr);
        printToken(t, ostr);
    }

    protected void printSpecial(Token tt, HTMLFileWriter ostr) {
        if (tt != null) {
            while (tt.specialToken != null) {
                tt = tt.specialToken;
            }
            while (tt != null) {
                tokenColourizeOpen(tt, ostr);
                ostr.write(addUnicodeEscapes(tt.image,
                                             new Position(tt.beginColumn,
                    tt.beginLine)));
                tokenColourizeClose(tt, ostr);
                tt = tt.next;
            }
        }
    }

    protected void printToken(Token t, HTMLFileWriter ostr) {
        if (t == prevToken) {
            return;
        }

        prevToken = t;

        tokenColourizeOpen(t, ostr);
        ostr.write(addUnicodeEscapes(t.image,
                                     new Position(t.beginColumn, t.beginLine)));
        tokenColourizeClose(t, ostr);
    }

    protected String getTokenClass(Token t) {
        switch (t.kind) {
            case JavaParserConstants.STRING_LITERAL:
                return "StringLiteral";
            case JavaParserConstants.CHARACTER_LITERAL:
                return "CharacerLiteral";
            case JavaParserConstants.SINGLE_LINE_COMMENT:
                return "SingleLineComment";
            case JavaParserConstants.FORMAL_COMMENT:
                return "FormalComment";
            case JavaParserConstants.MULTI_LINE_COMMENT:
                return "MultiLineComment";
            case JavaParserConstants.ABSTRACT:
                return "Abstract";
            case JavaParserConstants.ASSERT:
                return "Assert";
            case JavaParserConstants.AT:
                return "Annotation";
            case JavaParserConstants.BOOLEAN:
                return "Boolean";
            case JavaParserConstants.BREAK:
                return "Break";
            case JavaParserConstants.BYTE:
                return "Byte";
            case JavaParserConstants.CASE:
                return "Case";
            case JavaParserConstants.CATCH:
                return "Catch";
            case JavaParserConstants.CHAR:
                return "Char";
            case JavaParserConstants.CLASS:
                return "Class";
            case JavaParserConstants.CONST:
                return "Const";
            case JavaParserConstants.CONTINUE:
                return "Continue";
            case JavaParserConstants._DEFAULT:
                return "Default";
            case JavaParserConstants.DO:
                return "Do";
            case JavaParserConstants.DOUBLE:
                return "Double";
            case JavaParserConstants.ELSE:
                return "Else";
            case JavaParserConstants.ENUM:
                return "Enum";
            case JavaParserConstants.EXTENDS:
                return "Extends";
            case JavaParserConstants.FALSE:
                return "False";
            case JavaParserConstants.FINAL:
                return "Final";
            case JavaParserConstants.FINALLY:
                return "Finally";
            case JavaParserConstants.FLOAT:
                return "Float";
            case JavaParserConstants.FOR:
                return "For";
            case JavaParserConstants.GOTO:
                return "Goto";
            case JavaParserConstants.IF:
                return "If";
            case JavaParserConstants.IMPLEMENTS:
                return "Implements";
            case JavaParserConstants.IMPORT:
                return "Import";
            case JavaParserConstants.INSTANCEOF:
                return "InstanceOf";
            case JavaParserConstants.INT:
                return "Int";
            case JavaParserConstants.INTERFACE:
                return "Interface";
            case JavaParserConstants.LONG:
                return "Long";
            case JavaParserConstants.NATIVE:
                return "Native";
            case JavaParserConstants.NEW:
                return "New";
            case JavaParserConstants.NULL:
                return "Null";
            case JavaParserConstants.PACKAGE:
                return "Package";
            case JavaParserConstants.PRIVATE:
                return "Private";
            case JavaParserConstants.PROTECTED:
                return "Protected";
            case JavaParserConstants.PUBLIC:
                return "Public";
            case JavaParserConstants.RETURN:
                return "Return";
            case JavaParserConstants.SHORT:
                return "Short";
            case JavaParserConstants.STATIC:
                return "Static";
            case JavaParserConstants.SUPER:
                return "Super";
            case JavaParserConstants.SWITCH:
                return "Switch";
            case JavaParserConstants.SYNCHRONIZED:
                return "Synchronized";
            case JavaParserConstants.THIS:
                return "This";
            case JavaParserConstants.THROW:
                return "Throw";
            case JavaParserConstants.THROWS:
                return "Throws";
            case JavaParserConstants.TRANSIENT:
                return "Transient";
            case JavaParserConstants.TRUE:
                return "True";
            case JavaParserConstants.TRY:
                return "Try";
            case JavaParserConstants.VOID:
                return "Void";
            case JavaParserConstants.VOLATILE:
                return "Volatile";
            case JavaParserConstants.WHILE:
                return "While";
            case JavaParserConstants.STRICTFP:
                return "StrictFP";
            case JavaParserConstants.INTEGER_LITERAL:
                return "IntegerLiteral";
            case JavaParserConstants.DECIMAL_LITERAL:
                return "DecimalLiteral";
            case JavaParserConstants.HEX_LITERAL:
                return "HexLiteral";
            case JavaParserConstants.OCTAL_LITERAL:
                return "OctalLiteral";
            case JavaParserConstants.FLOATING_POINT_LITERAL:
                return "FloatPointLiteral";
            default:
                return null;
        }
    } // getTokenClass

    private void tokenColourizeOpen(Token t, HTMLFileWriter ostr) {
        final String tokenClass = getTokenClass( t );
        if ( tokenClass != null ) {
            ostr.setHTMLMode(false);
            ostr.write("<FONT CLASS=\"" + tokenClass + "\">");
            ostr.setHTMLMode(true);
        }
    }

    private void tokenColourizeClose(Token t, HTMLFileWriter ostr) {
        final String tokenClass = getTokenClass( t );
        if ( tokenClass != null ) {
            ostr.setHTMLMode(false);
            ostr.write("</FONT>");
            ostr.setHTMLMode(true);
        }
    }

    // not sure why one would do this ??
    private String addUnicodeEscapes(String str, Position p) {
        //  return str;// added by JS
        final StringBuilder retval = new StringBuilder();
        char ch;
        p.column = p.column + 5;
        //System.out.println("addUni column="+p.column+",line"+p.line);

        for (int i = 0; i < str.length(); i++, p.column++) {
            ch = str.charAt(i);
            //if ((ch < 0x20 || ch > 0x7e) && ch != '\t' && ch != '\n' && ch != '\r' && ch != '\f') {
            final String s = parser.getUnicodeRemapping(p);
            if (s != null) {
                //System.out.println("Match");
                //String s = "0000" + Integer.toString(ch, 16);
                retval.append( "\\u" );
                retval.append( s );
                p.column = p.column + 5;
            }
            else {
                retval.append( ch );
            }
        }
        return retval.toString();
    }

}
