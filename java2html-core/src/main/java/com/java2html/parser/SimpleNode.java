/*
 * Copyright (c) 1999-2007, Enterprise Solution Consultants Limited, All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

/* Generated By JJTree: Do not edit this line. SimpleNode.java */
/* JJT 0.3pre1 */
package com.java2html.parser;

import com.java2html.*;
import com.java2html.internal.*;

import java.io.PrintWriter;

public class SimpleNode
    implements Node, JavaParserConstants {
    protected Node parent;
    protected Node[] children;
    protected int id;
    JavaParser parser = null;


    public SimpleNode(int i) {
        id = i;
    }

    public SimpleNode(JavaParser p, int i) {
        this(i);
        parser = p;
    }

    public void jjtOpen() {
    }

    public void jjtClose() {
    }

    public void jjtSetParent(Node n) {
        parent = n;
    }

    public Node jjtGetParent() {
        return parent;
    }

    public void jjtAddChild(Node n, int i) {
        if (children == null) {
            children = new Node[i + 1];
        }
        else if (i >= children.length) {
            Node c[] = new Node[i + 1];
            System.arraycopy(children, 0, c, 0, children.length);
            children = c;
        }
        children[i] = n;
    }

    public Node jjtGetChild(int i) {
        return children[i];
    }

    public int jjtGetNumChildren() {
        return (children == null) ? 0 : children.length;
    }

    /* You can override these two methods in subclasses of SimpleNode to
       customize the way the node appears when the tree is dumped.  If
       your output uses more than one line you should override
       toString(String), otherwise overriding toString() is probably all
       you need to do. */

    public String toString() {
        return JavaParserTreeConstants.jjtNodeName[id];
    }

    public String toString(String prefix) {
        return prefix + toString();
    }

    /* Override this method if you want to customize how the node dumps
       out its children. */

    public void dump(String prefix) {
        System.out.println(toString(prefix));
        if (children == null) {
            for (int i = 0; i < children.length; ++i) {
                SimpleNode n = (SimpleNode) children[i];
                if (n != null) {
                    n.dump(prefix + " ");
                }
            }
        }
    }

// Manually inserted code begins here

    protected Token begin, end;
    public void setFirstToken(Token t) {
        begin = t;
        //System.out.println("setFirstToken:"+t);
    }

    public void setLastToken(Token t) {
        end = t;
        //System.out.println("setLastToken:"+t);
    }

    public void process(HTMLFileWriter ostr) {
        Token t = begin;
        //System.out.println("Begin:"+t);
        //System.out.println("End:"+end);
        SimpleNode bnode;

        int num = jjtGetNumChildren();
        for (int i = 0; i < num; i++) {
            bnode = (SimpleNode) jjtGetChild(i);
            //print forward tokens
            do {
                if (t == bnode.begin) {
                    break;
                }
                print(t, ostr);

                t = t.next;
            }
            while (true);

            bnode.process(ostr);

            t = bnode.end; //t = t.next;
        }
        do {
            //if (t== end || t==null) break;
            if (t == null) {
                break;
            }
            //ostr.write("["+this.toString()+"]");
            print(t, ostr);
            t = t.next;
        }
        while (true);

        //if (t!=null && t.kind == EOF) print(t,ostr);

    }

    // The following method prints token t, as well as all preceding
    // special tokens (essentially, white space and comments).

    private static Token prevToken = null;
    protected void print(Token t, HTMLFileWriter ostr) {
        if (t == prevToken) {
            return;
        }

        //prevToken =t;
        printSpecial(t.specialToken, ostr);
        printToken(t, ostr);
    }

    protected void printSpecial(Token tt, HTMLFileWriter ostr) {
        if (tt != null) {
            while (tt.specialToken != null) {
                tt = tt.specialToken;
            }
            while (tt != null) {
                tokenColourizeOpen(tt, ostr);
                ostr.write(addUnicodeEscapes(tt.image,
                                             new Position(tt.beginColumn,
                    tt.beginLine)));
                tokenColourizeClose(tt, ostr);
                tt = tt.next;
            }
        }
    }

    protected void printToken(Token t, HTMLFileWriter ostr) {
        if (t == prevToken) {
            return;
        }

        prevToken = t;

        tokenColourizeOpen(t, ostr);
        ostr.write(addUnicodeEscapes(t.image,
                                     new Position(t.beginColumn, t.beginLine)));
        tokenColourizeClose(t, ostr);
    }

    protected String getTokenClass(Token t) {
        switch (t.kind) {
            case STRING_LITERAL:
                return "StringLiteral";
            case CHARACTER_LITERAL:
                return "CharacerLiteral";
            case SINGLE_LINE_COMMENT:
                return "SingleLineComment";
            case FORMAL_COMMENT:
                return "FormalComment";
            case MULTI_LINE_COMMENT:
                return "MultiLineComment";
            case ABSTRACT:
                return "Abstract";
            case ASSERT:
                return "Assert";
            case AT:
                return "Annotation";
            case BOOLEAN:
                return "Boolean";
            case BREAK:
                return "Break";
            case BYTE:
                return "Byte";
            case CASE:
                return "Case";
            case CATCH:
                return "Catch";
            case CHAR:
                return "Char";
            case CLASS:
                return "Class";
            case CONST:
                return "Const";
            case CONTINUE:
                return "Continue";
            case _DEFAULT:
                return "Default";
            case DO:
                return "Do";
            case DOUBLE:
                return "Double";
            case ELSE:
                return "Else";
            case ENUM:
                return "Enum";
            case EXTENDS:
                return "Extends";
            case FALSE:
                return "False";
            case FINAL:
                return "Final";
            case FINALLY:
                return "Finally";
            case FLOAT:
                return "Float";
            case FOR:
                return "For";
            case GOTO:
                return "Goto";
            case IF:
                return "If";
            case IMPLEMENTS:
                return "Implements";
            case IMPORT:
                return "Import";
            case INSTANCEOF:
                return "InstanceOf";
            case INT:
                return "Int";
            case INTERFACE:
                return "Interface";
            case LONG:
                return "Long";
            case NATIVE:
                return "Native";
            case NEW:
                return "New";
            case NULL:
                return "Null";
            case PACKAGE:
                return "Package";
            case PRIVATE:
                return "Private";
            case PROTECTED:
                return "Protected";
            case PUBLIC:
                return "Public";
            case RETURN:
                return "Return";
            case SHORT:
                return "Short";
            case STATIC:
                return "Static";
            case SUPER:
                return "Super";
            case SWITCH:
                return "Switch";
            case SYNCHRONIZED:
                return "Synchronized";
            case THIS:
                return "This";
            case THROW:
                return "Throw";
            case THROWS:
                return "Throws";
            case TRANSIENT:
                return "Transient";
            case TRUE:
                return "True";
            case TRY:
                return "Try";
            case VOID:
                return "Void";
            case VOLATILE:
                return "Volatile";
            case WHILE:
                return "While";
            case STRICTFP:
                return "StrictFP";
            case INTEGER_LITERAL:
                return "IntegerLiteral";
            case DECIMAL_LITERAL:
                return "DecimalLiteral";
            case HEX_LITERAL:
                return "HexLiteral";
            case OCTAL_LITERAL:
                return "OctalLiteral";
            case FLOATING_POINT_LITERAL:
                return "FloatPointLiteral";
            default:
                return null;
        }
    } // getTokenClass

    private void tokenColourizeOpen(Token t, HTMLFileWriter ostr) {
        final String tokenClass = getTokenClass( t );
        if ( tokenClass != null ) {
            ostr.setHTMLMode(false);
            ostr.write("<FONT CLASS=\"" + tokenClass + "\">");
            ostr.setHTMLMode(true);
        }
    }

    private void tokenColourizeClose(Token t, HTMLFileWriter ostr) {
        final String tokenClass = getTokenClass( t );
        if ( tokenClass != null ) {
            ostr.setHTMLMode(false);
            ostr.write("</FONT>");
            ostr.setHTMLMode(true);
        }
    }

    // not sure why one would do this ??
    private String addUnicodeEscapes(String str, Position p) {
        //  return str;// added by JS
        final StringBuffer retval = new StringBuffer();
        char ch;
        p.column = p.column + 5;
        //System.out.println("addUni column="+p.column+",line"+p.line);

        for (int i = 0; i < str.length(); i++, p.column++) {
            ch = str.charAt(i);
            //if ((ch < 0x20 || ch > 0x7e) && ch != '\t' && ch != '\n' && ch != '\r' && ch != '\f') {
            final String s = parser.getUnicodeRemapping(p);
            if (s != null) {
                //System.out.println("Match");
                //String s = "0000" + Integer.toString(ch, 16);
                retval.append( "\\u" );
                retval.append( s );
                p.column = p.column + 5;
            }
            else {
                    /*TODO this can be improved in performance by using stringbuffer*/
                retval.append( ch );
            }
        }
        return retval.toString();
    }

}
